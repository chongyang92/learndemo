package com.lchy._15单例模式;

/**
    目标：单例设计模式（面试重点，常考）

    什么是单例？
        单例的意思是一个类永远只存在一个对象，不能创建多个对象
    为什么要用单例？
        开发中有很多类的对象我们只需要一个，例如虚拟机对象！任务管理器！(打开后再次打开，还是只有一个窗口)
    如何实现单例？
        单例的实现方式目前有2种方式：
        （1）饿汉单例设计模式：类加载的时候，对象已经创建好了，不管有没有被调用
                --通过类获取单例对象的时候，对象已经提前做好了！
                理解：饿汉(调用者)很饿去了包子铺（类），包子(对象)已经准备好了。(从头到尾，不管多少饿汉来只一个包子)
                --实现步骤：
                    1.定义一个单例类
                    2.私有的构造器
                    3.定义一个静态成员变量来存储一个对象
                        (饿汉单例在返回对象的时候，对象已经做好了，所以这里直接创建出来)
                    4.定义一个方法返回单例对象。
        （2）懒汉单例设计模式；
                --通过类获取单例对象的时候，发现没有对象才会去创建一个对象！
                    （）
                理解：懒汉(调用者)去包子铺(类)，去拿包子(对象)，老板说没有包子(包子)，马上做，老板做一个包子(对象)，另一个懒汉来了，有包子（从头到尾不管多少懒汉来，都只一个包子）
                --实现步骤：
                    1.定义一个单例类
                    2.把类构造器私有化
                    3.定义一个静态成员变量用于存储一个对象！
                        （懒汉单例不能直接创建对象，必须需要的时候才创建）
                    4.定义一个方法返回单例对象，判断对象不存在才创建一次，存在直接返回
 */
public class SingleInstanceDemo02 {
    public static void main(String[] args) {
        SingleInstance02 s1 = SingleInstance02.getInstance();
        SingleInstance02 s2 = SingleInstance02.getInstance();
        System.out.println(s1 == s2);
    }
}

//懒汉单例设计一个单例模式的类
class SingleInstance02 {

    //3.定义一个静态成员变量，存储对象
    public static SingleInstance02 ins ;

    //2.私有构造器，保证调用者自己不能创建对象
    private SingleInstance02(){

    }

    //3.静态方法返回对象
    public static SingleInstance02 getInstance(){
        if(ins == null){
            //第一次来取对象，创建一个对象
            ins = new SingleInstance02();
        }

        return ins;
    }
}


